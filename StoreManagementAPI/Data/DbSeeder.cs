using Microsoft.EntityFrameworkCore;
using System.Text;

namespace StoreManagementAPI.Data
{
    public static class DbSeeder
    {
        /// <summary>
        /// T·ª± ƒë·ªông seed database t·ª´ file SQL khi startup
        /// CH·ªà CH·∫†Y 1 L·∫¶N DUY NH·∫§T - Ki·ªÉm tra k·ªπ tr∆∞·ªõc khi import
        /// </summary>
        public static async Task SeedDatabase(StoreDbContext context, IWebHostEnvironment env)
        {
            try
            {
                // ===================================
                // B∆Ø·ªöC 1: KI·ªÇM TRA DATABASE ƒê√É C√ì D·ªÆ LI·ªÜU CH∆ØA
                // ===================================
                var hasUsers = await context.Users.AnyAsync();
                if (hasUsers)
                {
                    Console.WriteLine("\n‚úÖ Database ƒë√£ c√≥ d·ªØ li·ªáu. B·ªè qua seeding.");
                    Console.WriteLine("üí° ƒê·ªÉ reset: DROP DATABASE store_management; CREATE DATABASE store_management;\n");
                    return;
                }

                Console.WriteLine("\n====================================");
                Console.WriteLine("üå± DATABASE R·ªñNG - B·∫ÆT ƒê·∫¶U IMPORT");
                Console.WriteLine("====================================\n");

                // ===================================
                // B∆Ø·ªöC 2: IMPORT FILE SQL CH√çNH
                // ===================================
                var projectRoot = Directory.GetParent(env.ContentRootPath)?.FullName;
                if (projectRoot == null)
                {
                    Console.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y project root!");
                    return;
                }

                var mainSqlFile = Path.Combine(projectRoot, "store_management.sql");
                
                if (!File.Exists(mainSqlFile))
                {
                    Console.WriteLine($"‚ùå Kh√¥ng t√¨m th·∫•y file: {mainSqlFile}");
                    Console.WriteLine("‚ö†Ô∏è  Vui l√≤ng ƒë·∫£m b·∫£o file store_management.sql t·ªìn t·∫°i!");
                    return;
                }

                Console.WriteLine("üìÑ ƒêang import: store_management.sql");
                Console.WriteLine("‚è≥ Vui l√≤ng ƒë·ª£i... (c√≥ th·ªÉ m·∫•t 5-10 gi√¢y)\n");

                // ƒê·ªçc v√† th·ª±c thi file SQL
                var sqlContent = await File.ReadAllTextAsync(mainSqlFile, Encoding.UTF8);
                
                // Split theo delimiter v√† th·ª±c thi t·ª´ng batch
                var batches = SplitSqlBatches(sqlContent);
                int successCount = 0;
                int skipCount = 0;

                foreach (var batch in batches)
                {
                    if (string.IsNullOrWhiteSpace(batch)) continue;

                    try
                    {
                        await context.Database.ExecuteSqlRawAsync(batch);
                        successCount++;
                    }
                    catch (Exception ex)
                    {
                        // B·ªè qua c√°c l·ªói kh√¥ng nghi√™m tr·ªçng
                        var errorMsg = ex.Message.ToLower();
                        if (errorMsg.Contains("already exists") || 
                            errorMsg.Contains("duplicate entry") ||
                            errorMsg.Contains("duplicate key") ||
                            errorMsg.Contains("table") && errorMsg.Contains("already") ||
                            errorMsg.Contains("constraint"))
                        {
                            // L·ªói b√¨nh th∆∞·ªùng - table/constraint ƒë√£ t·ªìn t·∫°i
                            skipCount++;
                        }
                        else
                        {
                            // L·ªói nghi√™m tr·ªçng - c·∫ßn log
                            Console.WriteLine($"‚ö†Ô∏è  Warning: {ex.Message.Split('\n')[0]}");
                            skipCount++;
                        }
                    }
                }

                Console.WriteLine($"‚úÖ Import ho√†n t·∫•t!");
                Console.WriteLine($"   - Th√†nh c√¥ng: {successCount} l·ªánh");
                Console.WriteLine($"   - B·ªè qua: {skipCount} l·ªánh (ƒë√£ t·ªìn t·∫°i)\n");

                // ===================================
                // B∆Ø·ªöC 3: KI·ªÇM TRA K·∫æT QU·∫¢
                // ===================================
                var userCount = await context.Users.CountAsync();
                var productCount = await context.Products.CountAsync();
                var categoryCount = await context.Categories.CountAsync();

                Console.WriteLine("====================================");
                Console.WriteLine("üìä TH·ªêNG K√ä DATABASE");
                Console.WriteLine("====================================");
                Console.WriteLine($"üë• Users: {userCount}");
                Console.WriteLine($"üì¶ Products: {productCount}");
                Console.WriteLine($"üìÇ Categories: {categoryCount}");
                Console.WriteLine("====================================");
                Console.WriteLine("‚úÖ SEED DATABASE HO√ÄN T·∫§T!");
                Console.WriteLine("====================================\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"\n‚ùå L·ªñI SEED DATABASE: {ex.Message}");
                Console.WriteLine($"üí° Stack trace: {ex.StackTrace}\n");
            }
        }

        /// <summary>
        /// Chia SQL th√†nh c√°c batch ri√™ng bi·ªát ƒë·ªÉ tr√°nh l·ªói multi-statement
        /// </summary>
        private static List<string> SplitSqlBatches(string sql)
        {
            var batches = new List<string>();
            var currentBatch = new StringBuilder();
            var lines = sql.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();

                // B·ªè qua comments v√† d√≤ng tr·ªëng
                if (string.IsNullOrWhiteSpace(trimmedLine) || 
                    trimmedLine.StartsWith("--") || 
                    trimmedLine.StartsWith("/*") ||
                    trimmedLine.StartsWith("*"))
                {
                    continue;
                }

                // ‚ö†Ô∏è B·ªé QUA c√°c l·ªánh DROP/CREATE/USE DATABASE
                var upperLine = trimmedLine.ToUpper();
                if (upperLine.StartsWith("DROP DATABASE") ||
                    upperLine.StartsWith("CREATE DATABASE") ||
                    upperLine.StartsWith("USE "))
                {
                    Console.WriteLine($"‚è≠Ô∏è  B·ªè qua: {trimmedLine.Substring(0, Math.Min(50, trimmedLine.Length))}...");
                    continue;
                }

                // Th√™m d√≤ng v√†o batch hi·ªán t·∫°i
                currentBatch.AppendLine(line);

                // N·∫øu g·∫∑p d·∫•u ';' th√¨ k·∫øt th√∫c batch
                if (trimmedLine.EndsWith(";"))
                {
                    var batch = currentBatch.ToString().Trim();
                    if (!string.IsNullOrWhiteSpace(batch))
                    {
                        batches.Add(batch);
                    }
                    currentBatch.Clear();
                }
            }

            // Th√™m batch cu·ªëi c√πng n·∫øu c√≥
            if (currentBatch.Length > 0)
            {
                var batch = currentBatch.ToString().Trim();
                if (!string.IsNullOrWhiteSpace(batch))
                {
                    batches.Add(batch);
                }
            }

            return batches;
        }
    }
}
